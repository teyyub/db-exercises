 

### Actor Table Exercises

1. **Select:**
   - Write a query to select all columns from the `actor` table.
   - Retrieve actors' first names and last names.
   - Select actors along with their actor_id.
   - Fetch actors and include their birth dates.
   - Retrieve actors and their corresponding email addresses.

2. **Alias:**
   - Select actors and alias `first_name` as `first` and `last_name` as `last`.
   - Alias `actor_id` as `ID` in a query retrieving all actors.
   - Retrieve actors and alias `first_name` as `given_name`.
   - Alias `last_name` as `surname` in a query selecting actors.
   - Select actors and alias `date_of_birth` as `DOB`.

3. **Order By:**
   - Retrieve actors ordered by their last name in ascending order.
   - Select actors ordered by their first name in descending order.
   - Fetch actors sorted by their birth dates in ascending order.
   - Retrieve actors ordered by their actor_id in descending order.
   - Select actors and order them by their email addresses alphabetically.

4. **Distinct:**
   - Find distinct last names of all actors.
   - Select distinct first names of actors.
   - Retrieve distinct birth dates of actors.
   - Find unique combinations of first and last names.
   - Select unique email addresses of actors.

5. **Where:**
   - Select actors where the first name is 'Tom'.
   - Retrieve actors where the last name is 'Smith'.
   - Find actors born before the year 1980.
   - Select actors where the first name starts with 'A'.
   - Retrieve actors where the email address is 'example@example.com'.

6. **AND:**
   - List actors whose last name contains 'son' and first name starts with 'J'.
   - Retrieve actors whose first name is 'John' and last name is 'Doe'.
   - Find actors born after 1975 and whose last name contains 'son'.
   - Select actors whose first name starts with 'M' and last name starts with 'D'.
   - Retrieve actors born after 1985 and whose first name starts with 'S'.

7. **Order:**
   - Retrieve actors ordered by their last name in descending order.
   - Select actors ordered by their actor_id in ascending order.
   - Find actors sorted by their birth dates in ascending order.
   - Retrieve actors ordered by the length of their first names in descending order.
   - Select actors ordered by their email addresses alphabetically.

8. **Fetch:**
   - Retrieve the first 5 actors in the table.
   - Select the next 10 actors after skipping the first 5.
   - Fetch the first 20 actors in the table.
   - Retrieve 3 actors starting from the 7th position.
   - Select 15 actors after skipping the first 10.

9. **IN:**
   - Select actors where the actor_id is in (1, 3, 5).
   - Retrieve actors where the first_name is in ('Tom', 'Emma', 'John').
   - Find actors whose actor_id is in (2, 4, 6).
   - Select actors with actor_id in (10, 20, 30).
   - Retrieve actors with actor_id in (100, 200, 300).

10. **Joins:**
    - Retrieve actors and their films using an inner join with the `film_actor` table.
    - Select actors and their corresponding category names using a left join with `film_category`.
    - Find actors who starred in films with specific ratings using a join with `film`.
    - Retrieve actors and their payments using a join with `payment`.
    - Select actors and the rental details of the films they starred in using a join with `rental`.

11. **Like:**
    - Find actors whose last name starts with 'S'.
    - Retrieve actors whose first name contains 'a'.
    - Select actors with last names ending with 'son'.
    - Find actors with first names starting with 'M'.
    - Retrieve actors whose last names contain 'son'.

12. **Is Null:**
    - Retrieve actors where the last name is not specified (NULL).
    - Select actors where the date_of_birth is not provided (NULL).
    - Find actors whose email addresses are not available (NULL).
    - Retrieve actors where the phone numbers are not provided (NULL).
    - Select actors with no specified middle names (NULL).

13. **Group By:**
    - Count the number of actors grouped by their first name.
    - Retrieve actors grouped by their last name and count those with more than 1 occurrence.
    - Find actors and count their total payments grouped by actor_id.
    - Select actors and count the number of films they appeared in grouped by actor_id.
    - Retrieve actors grouped by their birth year and count those born in each year.

14. **Having:**
    - Display actors whose count of films they acted in is greater than 5.
    - Select actors grouped by first name and having a count greater than 2.
    - Find actors and display those with a total payment amount exceeding $1000.
    - Retrieve actors grouped by their last names and having at least 2 occurrences.
    - Select actors and display those with a total number of films greater than 10.

15. **Insert:**
    - Insert a new actor into the table.
    - Add multiple actors in a single insert statement.
    - Insert actors with specified first and last names.
    - Add new actors with specified birth dates.
    - Insert actors with specified email addresses.

16. **Update:**
    - Update an actor's last name where the first name is 'Emma'.
    - Change the first name of actors whose last name contains 'son'.
    - Update actors' birth dates where the actor_id is in (1, 3, 5).
    - Modify actors' email addresses whose last names start with 'D'.
    - Update actors' last names where the first name starts with 'A'.

17. **Delete:**
    - Delete an actor by actor_id.
    - Remove actors whose first name is 'John'.
    - Delete actors born before the year 1970.
    - Remove actors with actor_id in (2, 4, 6).
    - Delete actors with no specified email addresses.

18. **Subquery:**
    - Use a subquery to find actors who have appeared in films with a rating above 8.
    - Retrieve actors based on their film appearances using a subquery.
    - Find actors with payments exceeding the average payment amount using a subquery.
    - Select actors whose birth year matches the highest birth year in the table using a subquery.
    - Retrieve actors whose first names match those in a specified list using a subquery.

19. **Constraint:**
    - Add a constraint to ensure each actor has a unique actor_id.
    - Implement a constraint to restrict actors' last names to be non-null.
    - Define a constraint to ensure actors' first names are unique.
    - Add a constraint to enforce a minimum age requirement for actors.
    - Implement a constraint to ensure actors' birth dates are within a specified range.

20. **View:**
    - Create a view to display actor_id and their full name (first name and last name).
    - Design a view to show actors along with their birth dates.
    - Define a view to display actors and their total payments.
    - Create a view to show actors with their corresponding films.
    - Design a view to display actors and their category names.

21. **Trigger:**
    - Implement a trigger to log changes made to the actor table.
    - Create a trigger to update an audit table whenever an actor record is deleted.
    - Define a trigger to update actors' payment history when new payments are added.
    - Implement a trigger to enforce a constraint on actors' email addresses.
    - Create a trigger to update actors' records when their details are modified.

22. **Functions:**
    - Write a function to retrieve the total number of actors in the table.
    - Define a function to calculate the average age of actors.
    - Create a function to determine the number of films each actor has appeared in.
    - Write a function to retrieve the age of actors based on their birth dates.
    - Define a function to calculate the total payment amount received by actors.

23. **Procedures:**
    - Create a procedure to fetch actors by a specific criterion (e.g., by last name).
    - Implement a procedure to update an actor's information (e.g., first name and last name) based on actor_id.
    - Define a procedure to delete actors with no specified email addresses.
    - Create a procedure to insert new actors into the table.
    - Implement a procedure to retrieve actors and their corresponding films.

24. **Aggregate Functions:**
    - Calculate the average length of actors' last names.
    - Find the maximum number of films acted by any actor.
    - Determine the minimum age of actors based on their birth dates.
    - Calculate the sum of payments received by all actors.
    - Count the number of actors in the table.

25. **String Functions:**
    - Retrieve actors' last names in uppercase.
    - Concatenate actors' first names and last names with a space in between.
    - Extract the first 3 characters of actors' first names.
    - Find actors whose last names contain the substring 'son'.
    - Replace 'a' with 'o' in actors' first names.

26. **Date Functions:**
    - Select actors born after a specific date.
    - Calculate the age of actors based on their birth dates.
   

 - Retrieve actors born in a particular year.
    - Find actors born before a specific date.
    - Determine the current age of actors.

27. **Common Table Expression (CTE):**
    - Use a CTE to find actors who appeared in more than one film.
    - Retrieve actors and their total payments using a CTE.
    - Find actors and their corresponding films using a CTE.
    - Select actors and their birth dates using a CTE.
    - Retrieve actors and their category names using a CTE.

